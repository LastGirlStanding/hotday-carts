#
# Dynatrace Demo CI/CD Pipeline
#

#################################################################
# Global Variables
#################################################################
variables:
  APPLICATION_NAME: carts
  APPLICATION_SHORT_NAME: carts
  kubeconf_file: /tmp/kubeconf
  
stages:
  - deploy-test
  - deploy-hardening
  - load-hardening
  - dynatrace-get-problems
  - deploy-production


#################################################################
# Deploy Stage
#################################################################
deploy-cartsdb-in-test:
  image: docker.io/devth/helm:v2.12.3
  stage: deploy-test
  environment:
    name: carts-test
  variables:
    GIT_STRATEGY: fetch
  script:
    - echo ${kube_config} | base64 -d > ${kubeconf_file}
    - export KUBECONFIG=${kubeconf_file}
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - export KUBECONFIG=$KUBECONFIG
    - sed -i "s/REPLACEME/$(kubectl get cm -n keptn keptn-domain -ojsonpath={.data.app_domain})/g" charts/carts-db/values.yaml
    - helm upgrade
      carts-db-${CI_ENVIRONMENT_SLUG}
      --namespace=${CI_ENVIRONMENT_SLUG}
      --install
      --wait
      ./charts/carts-db/ 

deploy-carts-in-test:
  image: docker.io/devth/helm:v2.12.3
  stage: deploy-test
  environment:
    name: carts-test
  variables:
    GIT_STRATEGY: fetch
  script:
    - echo ${kube_config} | base64 -d > ${kubeconf_file}
    - export KUBECONFIG=${kubeconf_file}
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - export KUBECONFIG=$KUBECONFIG
    - sed -i "s/REPLACEME/$(kubectl get cm -n keptn keptn-domain -ojsonpath={.data.app_domain})/g" charts/carts/values.yaml
    - helm upgrade
      carts-${CI_ENVIRONMENT_SLUG}
      --namespace=${CI_ENVIRONMENT_SLUG}
      --install
      --wait
      --force
      ./charts/carts/

dt_test_deployment_event:
  stage: deploy-test
  image: docker.io/mvilliger/keptn-k8s-runner:0.6.2
  environment:
    name: carts-test
  variables:
      GIT_STRATEGY: none
  script: |
    echo ${kube_config} | base64 -d > ${kubeconf_file}
    export KUBECONFIG=${kubeconf_file}
    echo ${kube_config} | base64 -d > ${KUBECONFIG}
    export KUBECONFIG=$KUBECONFIG
    DT_TENANT_URL=$(kubectl -n keptn get secret dynatrace-credentials-gitlab -ojsonpath={.data.dynatrace-credentials} | base64 -d | yq r - -d '*' DT_TENANT | cut -c 3-)
    DT_API_TOKEN=$(kubectl -n keptn get secret dynatrace-credentials-gitlab -ojsonpath={.data.dynatrace-credentials} | base64 -d | yq r - -d '*' DT_API_TOKEN | cut -c 3-)
    echo ${APPLICATION_SHORT_NAME}-${CI_ENVIRONMENT_NAME}
    echo ${CI_COMMIT_SHORT_SHA}
    export DT_PAYLOAD="
    {
      \"eventType\": \"CUSTOM_DEPLOYMENT\",
      \"attachRules\": {
        \"tagRule\" : {
            \"meTypes\" : \"SERVICE\",
            \"tags\" : [ 
              {
                \"context\": \"CONTEXTLESS\",
                \"key\": \"hotday-tag-rule\", 
                \"value\": \"${APPLICATION_SHORT_NAME}-${CI_ENVIRONMENT_NAME}\"
              }
            ]
        }
      },
      \"deploymentName\":\"${CI_COMMIT_MESSAGE}\",
      \"deploymentVersion\":\"${CI_COMMIT_SHORT_SHA}\",
      \"deploymentProject\":\"${CI_PROJECT_ID}\",
      \"ciBackLink\":\"${CI_PIPELINE_URL}\",
      \"source\":\"GitLab\",
      \"customProperties\":{
        \"CI_JOB_URL\": \"${CI_JOB_URL}\",
        \"CI_JOB_ID\": \"${CI_JOB_ID}\",
        \"CI_PROJECT_ID\": \"${CI_PROJECT_ID}\",
        \"Commit\": \"${GIT_COMMIT}\"
      }
    }
    "
    echo $DT_PAYLOAD > payload.tmp
    curl -L -H "Authorization: Api-Token ${DT_API_TOKEN}" -H "Content-Type: application/json" "https://${DT_TENANT_URL}/api/v1/events" -d @payload.tmp
      
deploy-cartsdb-in-hardening:
  image: docker.io/devth/helm:v2.12.3
  stage: deploy-hardening
  environment:
    name: carts-hardening
  variables:
    GIT_STRATEGY: fetch
  script:
    - echo ${kube_config} | base64 -d > ${kubeconf_file}
    - export KUBECONFIG=${kubeconf_file}
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - export KUBECONFIG=$KUBECONFIG
    - sed -i "s/REPLACEME/$(kubectl get cm -n keptn keptn-domain -ojsonpath={.data.app_domain})/g" charts/carts-db/values.yaml
    - helm upgrade
      carts-db-${CI_ENVIRONMENT_SLUG}
      --namespace=${CI_ENVIRONMENT_SLUG}
      --install
      --wait
      ./charts/carts-db/

deploy-carts-in-staging:
  image: docker.io/devth/helm:v2.12.3
  stage: deploy-hardening
  environment:
    name: carts-hardening
  variables:
    GIT_STRATEGY: fetch
  script:
    - echo ${kube_config} | base64 -d > ${kubeconf_file}
    - export KUBECONFIG=${kubeconf_file}
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - export KUBECONFIG=$KUBECONFIG
    - sed -i "s/REPLACEME/$(kubectl get cm -n keptn keptn-domain -ojsonpath={.data.app_domain})/g" charts/carts/values.yaml
    - helm upgrade
      carts-${CI_ENVIRONMENT_SLUG}
      --namespace=${CI_ENVIRONMENT_SLUG}
      --install
      --wait
      --force
      ./charts/carts/

dt_stage_deployment_event:
    stage: deploy-hardening
    image: docker.io/mvilliger/keptn-k8s-runner:0.6.2
    environment:
      name: carts-hardening    
    variables:
        GIT_STRATEGY: none
    script: |
      echo ${kube_config} | base64 -d > ${kubeconf_file}
      export KUBECONFIG=${kubeconf_file}
      echo ${kube_config} | base64 -d > ${KUBECONFIG}
      export KUBECONFIG=$KUBECONFIG    
      DT_TENANT_URL=$(kubectl -n keptn get secret dynatrace-credentials-gitlab -ojsonpath={.data.dynatrace-credentials} | base64 -d | yq r - -d '*' DT_TENANT | cut -c 3-)
      DT_API_TOKEN=$(kubectl -n keptn get secret dynatrace-credentials-gitlab -ojsonpath={.data.dynatrace-credentials} | base64 -d | yq r - -d '*' DT_API_TOKEN | cut -c 3-)
      echo ${APPLICATION_SHORT_NAME}-${CI_ENVIRONMENT_NAME}
      echo ${CI_COMMIT_SHORT_SHA}
      export DT_PAYLOAD="
      {
        \"eventType\": \"CUSTOM_DEPLOYMENT\",
        \"attachRules\": {
          \"tagRule\" : {
              \"meTypes\" : \"SERVICE\",
              \"tags\" : [ 
                {
                  \"context\": \"CONTEXTLESS\",
                  \"key\": \"hotday-tag-rule\", 
                  \"value\": \"${APPLICATION_SHORT_NAME}-${CI_ENVIRONMENT_NAME}\"
                }
              ]
          }
        },
        \"deploymentName\":\"${CI_COMMIT_MESSAGE}\",
        \"deploymentVersion\":\"${CI_COMMIT_SHORT_SHA}\",
        \"deploymentProject\":\"${CI_PROJECT_ID}\",
        \"ciBackLink\":\"${CI_PIPELINE_URL}\",
        \"source\":\"GitLab\",
        \"customProperties\":{
          \"CI_JOB_URL\": \"${CI_JOB_URL}\",
          \"CI_JOB_ID\": \"${CI_JOB_ID}\",
          \"CI_PROJECT_ID\": \"${CI_PROJECT_ID}\",
          \"Commit\": \"${GIT_COMMIT}\"
        }
      }
      "
      echo $DT_PAYLOAD > payload.tmp
      curl -L -H "Authorization: Api-Token ${DT_API_TOKEN}" -H "Content-Type: application/json" "https://${DT_TENANT_URL}/api/v1/events" -d @payload.tmp
  
            
generate-load-in-hardening:
  image: docker.io/mvilliger/jmeter-k8s-runner:latest
  stage: load-hardening
  environment:
    name: carts-hardening
  variables:
    GIT_STRATEGY: fetch
  script:
    - echo ${kube_config} | base64 -d > ${kubeconf_file}
    - export KUBECONFIG=${kubeconf_file}
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - export KUBECONFIG=$KUBECONFIG
    - export DOMAIN=$(kubectl get cm -n keptn keptn-domain -ojsonpath={.data.app_domain})
    - jmeter -n -t ./jmeter/load.jmx
      -l ${CI_ENVIRONMENT_SLUG}_perf.tlf
      -JSERVER_URL="carts.${CI_ENVIRONMENT_SLUG}.${DOMAIN}"
      -JSERVER_PORT=80
      -JVUCount=10
      -JLoopCount=500
      -JThinkTime=250
      -JDT_LTN="PerfCheck_${CI_COMMIT_SHA}"

dt_get_problems:
  stage: dynatrace-get-problems
  image: docker.io/mvilliger/keptn-k8s-runner:0.6.2
  variables:
      GIT_STRATEGY: none
  script: |
    echo ${kube_config} | base64 -d > ${kubeconf_file}
    export KUBECONFIG=${kubeconf_file}
    echo ${kube_config} | base64 -d > ${KUBECONFIG}
    export KUBECONFIG=$KUBECONFIG    
    DT_TENANT_URL=$(kubectl -n keptn get secret dynatrace-credentials-gitlab -ojsonpath={.data.dynatrace-credentials} | base64 -d | yq r - -d '*' DT_TENANT | cut -c 3-)
    DT_API_TOKEN=$(kubectl -n keptn get secret dynatrace-credentials-gitlab -ojsonpath={.data.dynatrace-credentials} | base64 -d | yq r - -d '*' DT_API_TOKEN | cut -c 3-)
    problems=$(curl -X GET "https://${DT_TENANT_URL}/api/v1/problem/feed?tag=hotday-tag-rule:${APPLICATION_SHORT_NAME}-${CI_ENVIRONMENT_NAME}" -H "Authorization: Api-Token ${DT_API_TOKEN}" | jq ".result.problems[0]")
    if [ "$problems" == "null" ]; then
      echo "No problem was found with your deployment."
    else
      problemid=$(echo $problems|jq -r .id)            
      echo "A problem was detected by Dynatrace!"
      echo "Problem ID:"
      echo $problems|jq .id
      echo $problems|jq .rankedImpacts[0]
      echo "https://${DT_TENANT_URL}/#problems/problemdetails;pid=${problemid}"
      python /sendslack.py "A problem has been detected by Dynatrace. Please check https://${DT_TENANT_URL}/#problems/problemdetails;pid=${problemid}"
      exit 1
    fi
  when: delayed
  start_in: 10 minutes  

deploy-cartsdb-in-production:
  image: docker.io/devth/helm:v2.12.3
  stage: deploy-production
  environment:
    name: carts-production
  variables:
    GIT_STRATEGY: fetch
  script:
    - echo ${kube_config} | base64 -d > ${kubeconf_file}
    - export KUBECONFIG=${kubeconf_file}
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - export KUBECONFIG=$KUBECONFIG
    - sed -i "s/REPLACEME/$(kubectl get cm -n keptn keptn-domain -ojsonpath={.data.app_domain})/g" charts/carts-db/values.yaml
    - helm upgrade
      carts-db-${CI_ENVIRONMENT_SLUG}
      --namespace=${CI_ENVIRONMENT_SLUG}
      --install
      --wait
      ./charts/carts-db/

deploy-carts-in-production:
  image: docker.io/devth/helm:v2.12.3
  stage: deploy-production
  environment:
    name: carts-production
  variables:
    GIT_STRATEGY: fetch
  script:
    - echo ${kube_config} | base64 -d > ${kubeconf_file}
    - export KUBECONFIG=${kubeconf_file}
    - echo ${kube_config} | base64 -d > ${KUBECONFIG}
    - export KUBECONFIG=$KUBECONFIG
    - sed -i "s/REPLACEME/$(kubectl get cm -n keptn keptn-domain -ojsonpath={.data.app_domain})/g" charts/carts/values.yaml
    - helm upgrade
      carts-${CI_ENVIRONMENT_SLUG}
      --namespace=${CI_ENVIRONMENT_SLUG}
      --install
      --wait
      --force
      ./charts/carts/

dt_production_deployment_event:
  stage: deploy-production
  image: docker.io/mvilliger/keptn-k8s-runner:0.6.2
  environment:
    name: carts-production    
  variables:
      GIT_STRATEGY: none
  script: |
    echo ${kube_config} | base64 -d > ${kubeconf_file}
    export KUBECONFIG=${kubeconf_file}
    echo ${kube_config} | base64 -d > ${KUBECONFIG}
    export KUBECONFIG=$KUBECONFIG    
    DT_TENANT_URL=$(kubectl -n keptn get secret dynatrace-credentials-gitlab -ojsonpath={.data.dynatrace-credentials} | base64 -d | yq r - -d '*' DT_TENANT | cut -c 3-)
    DT_API_TOKEN=$(kubectl -n keptn get secret dynatrace-credentials-gitlab -ojsonpath={.data.dynatrace-credentials} | base64 -d | yq r - -d '*' DT_API_TOKEN | cut -c 3-)
    echo ${APPLICATION_SHORT_NAME}-${CI_ENVIRONMENT_NAME}
    echo ${CI_COMMIT_SHORT_SHA}
    export DT_PAYLOAD="
    {
      \"eventType\": \"CUSTOM_DEPLOYMENT\",
      \"attachRules\": {
        \"tagRule\" : {
            \"meTypes\" : \"SERVICE\",
            \"tags\" : [ 
              {
                \"context\": \"CONTEXTLESS\",
                \"key\": \"hotday-tag-rule\", 
                \"value\": \"${APPLICATION_SHORT_NAME}-${CI_ENVIRONMENT_NAME}\"
              }
            ]
        }
      },
      \"deploymentName\":\"${CI_COMMIT_MESSAGE}\",
      \"deploymentVersion\":\"${CI_COMMIT_SHORT_SHA}\",
      \"deploymentProject\":\"${CI_PROJECT_ID}\",
      \"ciBackLink\":\"${CI_PIPELINE_URL}\",
      \"source\":\"GitLab\",
      \"customProperties\":{
        \"CI_JOB_URL\": \"${CI_JOB_URL}\",
        \"CI_JOB_ID\": \"${CI_JOB_ID}\",
        \"CI_PROJECT_ID\": \"${CI_PROJECT_ID}\",
        \"Commit\": \"${GIT_COMMIT}\"
      }
    }
    "
    echo $DT_PAYLOAD > payload.tmp
    curl -L -H "Authorization: Api-Token ${DT_API_TOKEN}" -H "Content-Type: application/json" "https://${DT_TENANT_URL}/api/v1/events" -d @payload.tmp
      